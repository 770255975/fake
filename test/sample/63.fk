include "./package/template.fk"
include "./package/math.fk"
include "./package/string.fk"

func elecmp(left, right)

	lstr := left["name"]
	rstr := right["name"]
	return string.cmp(lstr, rstr)
	
end

func main()

	ok, ret, errormsg := json.parse("63.json")
	if not ok then
		return false, errormsg
	end
	
	var data = map()
	var eles = array()
	data["memlist"] = eles
	data["name"] = "63"
	
	for var i = 0, i < size(ret[0]), i++ then
		var k, var v = range(ret[0], i)
	
		var ele = map()
		ele["name"] = k
		ele["type"] = typeof(v)
		
		if typeof(v) == "REAL" then
			if is isinteger(v) then
				ele["type"] = "INT"
			end
		end
		
		if typeof(v) == "ARRAY" then
			ele["type"] = "INTS"
		end
		
		eles[size(eles)] = ele
		
		math.sort(eles, "elecmp")
		
	end
	
	print(data)
	
	-- 读取src
	ok, var srcf = file.open("63.tpl", "rb")
	if not ok then
		return false, "open src fail "
	end
	
	var src = file.read_all(srcf)
	
	-- 生成
	global := map()
	ok, var des = template.gen(global, data, src)
	if not ok then
		return false, string.cat("template gen fail:", des)
	end
	
	-- 生成des
	ok, var desf = file.open("63.java", "wb")
	if not ok then
		return false, "open des fail"
	end
	
	file.write_all(desf, des)
	
	print("template gen ok")
	
	return true
	
end
