package net

include "buffer.fk"

-----------------------------------------------------------------------------

struct _tcp_client
	is_open
	recvbuffer
	sendbuffer
end

struct _tcp_server
	is_open
	svuserdata
end

struct _tcp_link
	recvbuffer
	sendbuffer
end

func new_tcp_client(ip, port, buffersize, socketbuffersize, cb_connect, cb_close, cb_parse, userdata)
	
	var c = _tcp_client()
	c->is_open = true
	c->sendbuffer = buffer.new(buffersize)
	c->recvbuffer = buffer.new(buffersize)
	fake _tcp_client_tick(c, ip, port, buffersize, socketbuffersize, cb_connect, cb_close, cb_parse, userdata)
	return c
	
end

func _tcp_client_tick(c, ip, port, buffersize, socketbuffersize, cb_connect, cb_close, cb_parse, userdata)

	var isConnect = false
	var s = 0
	var sel = selector(s)
	var recvbuffer = c->recvbuffer
	var sendbuffer = c->sendbuffer
	var local_ip = "empty"
	var local_port = 0
	
	while is c->is_open then
	
		if is isConnect then
		
			-- 处理事件
			var eventnum, var iserr, var isin, var isout = selector_tick(sel)
			
			if eventnum > 0 then
				
				if is iserr then
					selector_set(sel, -1)
					close(s)
					isConnect = false
					cb_close(c, userdata)
					continue
				end
				
				if is isin then
					var ok, var size = tcprecv(s, recvbuffer)
					if not ok then
						selector_set(sel, -1)
						close(s)
						isConnect = false
						cb_close(c, userdata)
						continue
					end
				end
				
				if is isout then
					var ok, var size = tcpsend(s, sendbuffer)
					if not ok then
						selector_set(sel, -1)
						close(s)
						isConnect = false
						cb_close(c, userdata)
						continue
					end
				end
			else
				yield 1
			end
			
		else
			
			-- 重连
			s = socket()
	
			if not connect(s, ip, port) then
				close(s)
				isConnect = false
				sleep 10
				continue
			end
				
			socket_set_sendbuffer(s, socketbuffersize)
			socket_set_recvbuffer(s, socketbuffersize)
				
			socket_set_nonblocking(s, true)
			socket_set_nodelay(s, true)
			socket_set_keepalive(s, true, 120, 10, 3)
			socket_set_linger(s, 0)
				
			local_ip, local_port = socket_get_local_ip_port(s)
				
			selector_set(sel, s)
			
			isConnect = true
			
			cb_connect(c, userdata)
			
		end
	
		-- 回调
		if buffer.size(recvbuffer) > 0 then
			cb_parse(c, userdata, recvbuffer)
		end
	end

	if is isConnect then
		close(s)
		isConnect = false
		cb_close(c, userdata)
	end
	
end

func tcp_send(c, b)

	return buffer.push_buffer(c->sendbuffer, b)

end

func tcp_close(c)

	c->is_open = false

end

-----------------------------------------------------------------------------

func new_tcp_server(ip, port, buffersize, socketbuffersize, backlog, cb_accept, cb_close, cb_parse, svuserdata)

	var sv = _tcp_server()
	sv->is_open = true
	sv->svuserdata = svuserdata
	fake _tcp_server_tick(sv, ip, port, buffersize, socketbuffersize, backlog, cb_accept, cb_close, cb_parse)
	return sv
	
end

func _tcp_server_tick(sv, ip, port, buffersize, socketbuffersize, backlog, cb_accept, cb_close, cb_parse)

	var s = socket()
	var sel = selector(s)
	
	var ok = bind(s, ip, port)
	if not ok then
		return
	end
	
	ok = listen(s, backlog)
	if not ok then
		return
	end
	
	socket_set_nonblocking(s, true)
	
	while is sv->is_open then
	
		-- 处理事件
		var eventnum, var iserr, var isin, var isout = selector_tick(sel)
		
		if eventnum > 0 then
			
			if is isin then
				
				fake _tcp_server_conn_tick(sv, s, buffersize, socketbuffersize, cb_accept, cb_close, cb_parse)
				
			end
		else
			yield 10
		end
		
	end

	close(s)
	
end

func _tcp_server_conn_tick(sv, listens, buffersize, socketbuffersize, cb_accept, cb_close, cb_parse)

	var ok, var s = accept(listens)
	if not ok then
		return
	end
	
	var l = _tcp_link()
	l->sendbuffer = buffer.new(buffersize)
	l->recvbuffer = buffer.new(buffersize)
	
	var sel = selector(s)
	
	socket_set_sendbuffer(s, socketbuffersize)
	socket_set_recvbuffer(s, socketbuffersize)
		
	socket_set_nonblocking(s, true)
	socket_set_nodelay(s, true)
	socket_set_keepalive(s, true, 120, 10, 3)
	socket_set_linger(s, 0)
		
	var local_ip, var local_port = socket_get_local_ip_port(s)
		
	var sendbuffer = l->sendbuffer
	var recvbuffer = l->recvbuffer
	
	var userdata = cb_accept(sv, l, s)
	
	var isConnect = true
	
	while sv->is_open == true and isConnect == true then
	
		-- 处理事件
		var eventnum, var iserr, var isin, var isout = selector_tick(sel)
		
		if eventnum > 0 then
			
			if is iserr then
				cb_close(sv, l, userdata)
				break
			end
			
			if is isin then
				var ok, var size = tcprecv(s, recvbuffer)
				if not ok then
					cb_close(sv, l, userdata)
					break
				end
			end
			
			if is isout then
				var ok, var size = tcpsend(s, sendbuffer)
				if not ok then
					cb_close(sv, l, userdata)
					break
				end
			end
			
		else
			yield 1
		end
		
		-- 回调
		if buffer.size(recvbuffer) > 0 then
			cb_parse(sv, l, userdata, recvbuffer)
		end
	end
	
	close(s)
	
end
